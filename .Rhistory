# ----------------------- TEMPORARY PNG FILE -----------------------------------
## The code below saves a .png plot of the probit model to the R working
## directory. This image is later inserted into the Excel file, and the .png
## file finally deleted.
## Start and configure the PNG engine.
png(file = "./figures/HF183_lod.png", bg = "white",
width = 1200, height = 750, units = "px", res = 600,
type = "cairo", antialias = "default",
family = "Helvetica", pointsize = 3)
par(oma = c(0.05,0.05,0.05,0.05))
## Create "empty" plot first. This way we can overlay the curve on top of the grid.
plot(mod.probit, type = "n", bty = "n", xlim = c(0.1, 10^5), ylim = c(0, 1),
xlab = "Copies per assay", ylab = "Positives/Total", font.main = 1,
cex.main = 0.8, axes = FALSE)
## Draw the grid lines.
abline(h = c(seq(0, 0.4, by = 0.1), seq(0.6, 1, by = 0.1)), lwd = linewd3,
col = ab.lines)
abline(v = seq(0.2, 0.9, by = 0.1), lwd = linewd3, col = ab.lines)
abline(v = seq(2, 9, by = 1), lwd = linewd3, col = ab.lines)
abline(v = seq(20, 90, by = 10), lwd = linewd3, col = ab.lines)
abline(v = seq(200, 900, by = 100), lwd = linewd3, col = ab.lines)
abline(v = seq(2000, 9000, by = 1000), lwd = linewd3, col = ab.lines)
abline(v = seq(20000, 90000, by = 10^4), lwd = linewd3, col = ab.lines)
abline(v = c(0.1, 1, 10, 100, 1000, 10^4, 10^5), lwd = linewd3, col = ab.lines2)
abline(h = c(0.5, 0.95), lwd = linewd3, col = thresholds)
## Overlay the assay points and the curve for the probit model. Draw the axes.
par(new = TRUE)
plot(mod.probit,
pch = 19, bg = shading, cex = 0.875, xlim = c(0.1, 10^5), ylim = c(0, 1),
lwd = linewd2, col = theme,
main = "", xlab = "", ylab = "",
axes = FALSE, bty = "n"
)
axis(1, at=c(0.1, 1, 10, 100, 1000, 10000, 100000),
labels = c(0.1, 1, 10, 100, 1000, 10000, 100000), lty = 1, lwd = 0.8,
lwd.ticks = 0.8)
axis(2, at=c(0, 0.5, 0.95), labels = c("0%", "50%", "95%"), lty = 1, las = 2,
cex = 0.25, lwd = 0.8, lwd.ticks = 0.8)
## Plot the 95% confidence interval using transparent shading.
polygon(x = c(pxx, rev(pxx)),
y = c(predict2.ci[,2], rev(predict2.ci[,3])),
col = shading, border = NA)
View(HF183_probit)
#HF183
HF183_probit =
std_curves %>%
filter(Target == "HF183") %>%
mutate(Cq = as.numeric(Cq)) %>%
filter(dilution > 4 & dilution < 13) %>%
mutate(detection = case_when(Cq != "NaN" ~ 1,
TRUE ~ 0)) %>%
group_by(dilution, quantity) %>%
summarize(Total = n(),
Positives = sum(detection)) %>%
ungroup() %>%
mutate(Nb_copies = quantity) %>%
dplyr::select(Nb_copies, Positives, Total)
## Relabel data
probdata <- HF183_probit
encab <- colnames(probdata)
colnames(probdata) <- c("Dose", "Positives", "Total")
## These will be the percent values to calculate effective doses for.
steps <- c(1:9, seq(10, 85, by = 5), 90:99)
## Calculation of the probit model and predicted effective doses.
mod.probit <- drm(
formula = I(Positives/Total) ~ Dose,
weights = Total,
data = probdata,
fct = LN.2(),
type = "binomial"
)
colnames(probdata) <- encab # Restores the column names in the raw data table.
EDose <- ED(mod.probit, respLev = steps, interval = "delta", level = 0.95)
EDose <- cbind(ED.percent = steps, EDose)
timestamp <- date()
## Colour scheme and other graphical parameters.
theme <- "black"
theme.grid <- "gray70"
shading <- adjustcolor(theme, alpha.f = 0.15)        #  For the 95% CI
thresholds <- adjustcolor(theme.grid, alpha.f = 1)   #  For the curve and arrows
ab.lines <- adjustcolor(theme.grid, alpha.f = 0.35)  #  For the minor grid
ab.lines2 <- adjustcolor(theme.grid, alpha.f = 0.85) #  For the powers of 10
coltext <- "red3"                                    #  For the 50% and 95% EDs
linewd1 <- 2
linewd2 <- 1
linewd3 <- 0.6
## Start and configure the PNG engine.
png(file = "./figures/HF183_lod.png", bg = "white",
width = 1200, height = 750, units = "px", res = 600,
type = "cairo", antialias = "default",
family = "Helvetica", pointsize = 3)
par(oma = c(0.05,0.05,0.05,0.05))
## Create "empty" plot first. This way we can overlay the curve on top of the grid.
plot(mod.probit, type = "n", bty = "n", xlim = c(0.1, 10^5), ylim = c(0, 1),
xlab = "Copies per assay", ylab = "Positives/Total", font.main = 1,
cex.main = 0.8, axes = FALSE)
## Draw the grid lines.
abline(h = c(seq(0, 0.4, by = 0.1), seq(0.6, 1, by = 0.1)), lwd = linewd3,
col = ab.lines)
abline(v = seq(0.2, 0.9, by = 0.1), lwd = linewd3, col = ab.lines)
abline(v = seq(2, 9, by = 1), lwd = linewd3, col = ab.lines)
abline(v = seq(20, 90, by = 10), lwd = linewd3, col = ab.lines)
abline(v = seq(200, 900, by = 100), lwd = linewd3, col = ab.lines)
abline(v = seq(2000, 9000, by = 1000), lwd = linewd3, col = ab.lines)
abline(v = seq(20000, 90000, by = 10^4), lwd = linewd3, col = ab.lines)
abline(v = c(0.1, 1, 10, 100, 1000, 10^4, 10^5), lwd = linewd3, col = ab.lines2)
abline(h = c(0.5, 0.95), lwd = linewd3, col = thresholds)
## Overlay the assay points and the curve for the probit model. Draw the axes.
par(new = TRUE)
plot(mod.probit,
pch = 19, bg = shading, cex = 0.875, xlim = c(0.1, 10^5), ylim = c(0, 1),
lwd = linewd2, col = theme,
main = "", xlab = "", ylab = "",
axes = FALSE, bty = "n"
)
axis(1, at=c(0.1, 1, 10, 100, 1000, 10000, 100000),
labels = c(0.1, 1, 10, 100, 1000, 10000, 100000), lty = 1, lwd = 0.8,
lwd.ticks = 0.8)
axis(2, at=c(0, 0.5, 0.95), labels = c("0%", "50%", "95%"), lty = 1, las = 2,
cex = 0.25, lwd = 0.8, lwd.ticks = 0.8)
## Plot the 95% confidence interval using transparent shading.
polygon(x = c(pxx, rev(pxx)),
y = c(predict2.ci[,2], rev(predict2.ci[,3])),
col = shading, border = NA)
## Plot the legend.
legend(x = 12500, y = 0.225, bty = "o", cex = 0.8, bg = "white", box.col = NA,
box.lwd = 1, inset = c(0.02, 0.03), y.intersp = 1.15,
legend = c("Assay points", "Probit model", "95% CI"), lty = c(NA, 1, NA),
pch = c(19, NA, 15), lwd = c(NA, linewd2, NA), seg.len =1.15,
col = c(theme, theme, shading), pt.cex = c(0.7, NA, 1.8), pt.lwd = linewd2)
## Draw arrows and annotations for the ED50 and ED95 intersection with the probit curve.
arrows(EDose[EDose[, 1] == 50, 2], 0.5, EDose[EDose[, 1] == 50, 2], 0,
length = 0.025, angle = 25, code = 2, col = theme, lty = 1,
lwd = 1.05 * linewd3)
arrows(EDose[EDose[, 1] == 95, 2], 0.95, EDose[EDose[, 1] == 95, 2], 0,
length = 0.025, angle = 25, code = 2, col = theme, lty = 1,
lwd = 1.05 * linewd3)
text(EDose[EDose[, 1] == 50, 2], 0.5,
labels = signif(EDose[EDose[, 1] == 50, 2], digits = 3), cex = 0.8,
pos = 2, col = coltext, offset = 1.05)
text(EDose[EDose[, 1] == 95, 2], 0.95,
labels = signif(EDose[EDose[, 1] == 95, 2], digits = 3), cex = 0.8,
pos = 2, col = coltext, offset = 1.05)
dev.off()
crassphage_probit =
std_curves %>%
filter(Target == "crassphage") %>%
mutate(Cq = as.numeric(Cq)) %>%
filter(dilution > 7) %>%
mutate(detection = case_when(Cq != "NaN" ~ 1,
TRUE ~ 0)) %>%
group_by(dilution, quantity) %>%
summarize(Total = n(),
Positives = sum(detection)) %>%
ungroup() %>%
mutate(Nb_copies = quantity) %>%
dplyr::select(Nb_copies, Positives, Total)
#-------------------------------------------------------------------------------
#    Title: Probit analysis of quantitative real-time PCR under R
#    Author: Jose Enrique Mejia
#    Code version: 1.0.0
#    Availability: https://zenodo.org/records/4041341
#-------------------------------------------------------------------------------
## Relabel data
probdata <- HF183_probit
encab <- colnames(probdata)
colnames(probdata) <- c("Dose", "Positives", "Total")
## These will be the percent values to calculate effective doses for.
steps <- c(1:9, seq(10, 85, by = 5), 90:99)
## Calculation of the probit model and predicted effective doses.
mod.probit <- drm(
formula = I(Positives/Total) ~ Dose,
weights = Total,
data = probdata,
fct = LN.2(),
type = "binomial"
)
colnames(probdata) <- encab # Restores the column names in the raw data table.
EDose <- ED(mod.probit, respLev = steps, interval = "delta", level = 0.95)
EDose <- cbind(ED.percent = steps, EDose)
timestamp <- date()
## Colour scheme and other graphical parameters.
theme <- "black"
theme.grid <- "gray70"
shading <- adjustcolor(theme, alpha.f = 0.15)        #  For the 95% CI
thresholds <- adjustcolor(theme.grid, alpha.f = 1)   #  For the curve and arrows
ab.lines <- adjustcolor(theme.grid, alpha.f = 0.35)  #  For the minor grid
ab.lines2 <- adjustcolor(theme.grid, alpha.f = 0.85) #  For the powers of 10
coltext <- "red3"                                    #  For the 50% and 95% EDs
linewd1 <- 2
linewd2 <- 1
linewd3 <- 0.6
## Start and configure the PNG engine.
png(file = "./figures/HF183_lod.png", bg = "white",
width = 1200, height = 750, units = "px", res = 600,
type = "cairo", antialias = "default",
family = "Helvetica", pointsize = 3)
par(oma = c(0.05,0.05,0.05,0.05))
## Create "empty" plot first. This way we can overlay the curve on top of the grid.
plot(mod.probit, type = "n", bty = "n", xlim = c(0.1, 10^5), ylim = c(0, 1),
xlab = "Copies per assay", ylab = "Positives/Total", font.main = 1,
cex.main = 0.8, axes = FALSE)
## Draw the grid lines.
abline(h = c(seq(0, 0.4, by = 0.1), seq(0.6, 1, by = 0.1)), lwd = linewd3,
col = ab.lines)
abline(v = seq(0.2, 0.9, by = 0.1), lwd = linewd3, col = ab.lines)
abline(v = seq(2, 9, by = 1), lwd = linewd3, col = ab.lines)
abline(v = seq(20, 90, by = 10), lwd = linewd3, col = ab.lines)
abline(v = seq(200, 900, by = 100), lwd = linewd3, col = ab.lines)
abline(v = seq(2000, 9000, by = 1000), lwd = linewd3, col = ab.lines)
abline(v = seq(20000, 90000, by = 10^4), lwd = linewd3, col = ab.lines)
abline(v = c(0.1, 1, 10, 100, 1000, 10^4, 10^5), lwd = linewd3, col = ab.lines2)
abline(h = c(0.5, 0.95), lwd = linewd3, col = thresholds)
## Overlay the assay points and the curve for the probit model. Draw the axes.
par(new = TRUE)
plot(mod.probit,
pch = 19, bg = shading, cex = 0.875, xlim = c(0.1, 10^5), ylim = c(0, 1),
lwd = linewd2, col = theme,
main = "", xlab = "", ylab = "",
axes = FALSE, bty = "n"
)
axis(1, at=c(0.1, 1, 10, 100, 1000, 10000, 100000),
labels = c(0.1, 1, 10, 100, 1000, 10000, 100000), lty = 1, lwd = 0.8,
lwd.ticks = 0.8)
axis(2, at=c(0, 0.5, 0.95), labels = c("0%", "50%", "95%"), lty = 1, las = 2,
cex = 0.25, lwd = 0.8, lwd.ticks = 0.8)
## Plot the 95% confidence interval using transparent shading.
polygon(x = c(pxx, rev(pxx)),
y = c(predict2.ci[,2], rev(predict2.ci[,3])),
col = shading, border = NA)
#HF183
HF183_probit =
std_curves %>%
filter(Target == "HF183") %>%
mutate(Cq = as.numeric(Cq)) %>%
filter(dilution > 4 & dilution < 13) %>%
mutate(detection = case_when(Cq != "NaN" ~ 1,
TRUE ~ 0)) %>%
group_by(dilution, quantity) %>%
summarize(Total = n(),
Positives = sum(detection)) %>%
ungroup() %>%
mutate(Nb_copies = quantity) %>%
dplyr::select(Nb_copies, Positives, Total)
#-------------------------------------------------------------------------------
#    Title: Probit analysis of quantitative real-time PCR under R
#    Author: Jose Enrique Mejia
#    Code version: 1.0.0
#    Availability: https://zenodo.org/records/4041341
#-------------------------------------------------------------------------------
## Relabel data
probdata <- HF183_probit
encab <- colnames(probdata)
colnames(probdata) <- c("Dose", "Positives", "Total")
## These will be the percent values to calculate effective doses for.
steps <- c(1:9, seq(10, 85, by = 5), 90:99)
## Calculation of the probit model and predicted effective doses.
mod.probit <- drm(
formula = I(Positives/Total) ~ Dose,
weights = Total,
data = probdata,
fct = LN.2(),
type = "binomial"
)
colnames(probdata) <- encab # Restores the column names in the raw data table.
EDose <- ED(mod.probit, respLev = steps, interval = "delta", level = 0.95)
EDose <- cbind(ED.percent = steps, EDose)
timestamp <- date()
## Colour scheme and other graphical parameters.
theme <- "black"
theme.grid <- "gray70"
shading <- adjustcolor(theme, alpha.f = 0.15)        #  For the 95% CI
thresholds <- adjustcolor(theme.grid, alpha.f = 1)   #  For the curve and arrows
ab.lines <- adjustcolor(theme.grid, alpha.f = 0.35)  #  For the minor grid
ab.lines2 <- adjustcolor(theme.grid, alpha.f = 0.85) #  For the powers of 10
coltext <- "red3"                                    #  For the 50% and 95% EDs
linewd1 <- 2
linewd2 <- 1
linewd3 <- 0.6
## Start and configure the PNG engine.
png(file = "./figures/HF183_lod.png", bg = "white",
width = 1200, height = 750, units = "px", res = 600,
type = "cairo", antialias = "default",
family = "Helvetica", pointsize = 3)
par(oma = c(0.05,0.05,0.05,0.05))
## Create "empty" plot first. This way we can overlay the curve on top of the grid.
plot(mod.probit, type = "n", bty = "n", xlim = c(0.1, 10^5), ylim = c(0, 1),
xlab = "Copies per assay", ylab = "Positives/Total", font.main = 1,
cex.main = 0.8, axes = FALSE)
## Draw the grid lines.
abline(h = c(seq(0, 0.4, by = 0.1), seq(0.6, 1, by = 0.1)), lwd = linewd3,
col = ab.lines)
abline(v = seq(0.2, 0.9, by = 0.1), lwd = linewd3, col = ab.lines)
abline(v = seq(2, 9, by = 1), lwd = linewd3, col = ab.lines)
abline(v = seq(20, 90, by = 10), lwd = linewd3, col = ab.lines)
abline(v = seq(200, 900, by = 100), lwd = linewd3, col = ab.lines)
abline(v = seq(2000, 9000, by = 1000), lwd = linewd3, col = ab.lines)
abline(v = seq(20000, 90000, by = 10^4), lwd = linewd3, col = ab.lines)
abline(v = c(0.1, 1, 10, 100, 1000, 10^4, 10^5), lwd = linewd3, col = ab.lines2)
abline(h = c(0.5, 0.95), lwd = linewd3, col = thresholds)
## Overlay the assay points and the curve for the probit model. Draw the axes.
par(new = TRUE)
plot(mod.probit,
pch = 19, bg = shading, cex = 0.875, xlim = c(0.1, 10^5), ylim = c(0, 1),
lwd = linewd2, col = theme,
main = "", xlab = "", ylab = "",
axes = FALSE, bty = "n"
)
axis(1, at=c(0.1, 1, 10, 100, 1000, 10000, 100000),
labels = c(0.1, 1, 10, 100, 1000, 10000, 100000), lty = 1, lwd = 0.8,
lwd.ticks = 0.8)
axis(2, at=c(0, 0.5, 0.95), labels = c("0%", "50%", "95%"), lty = 1, las = 2,
cex = 0.25, lwd = 0.8, lwd.ticks = 0.8)
## Plot the 95% confidence interval using transparent shading.
polygon(x = c(pxx, rev(pxx)),
y = c(predict2.ci[,2], rev(predict2.ci[,3])),
col = shading, border = NA)
## Relabel data
probdata <- HF183_probit
encab <- colnames(probdata)
colnames(probdata) <- c("Dose", "Positives", "Total")
## These will be the percent values to calculate effective doses for.
steps <- c(1:9, seq(10, 85, by = 5), 90:99)
## Calculation of the probit model and predicted effective doses.
mod.probit <- drm(
formula = I(Positives/Total) ~ Dose,
weights = Total,
data = probdata,
fct = LN.2(),
type = "binomial"
)
colnames(probdata) <- encab # Restores the column names in the raw data table.
EDose <- ED(mod.probit, respLev = steps, interval = "delta", level = 0.95)
EDose <- cbind(ED.percent = steps, EDose)
timestamp <- date()
## Colour scheme and other graphical parameters.
theme <- "black"
theme.grid <- "gray70"
shading <- adjustcolor(theme, alpha.f = 0.15)        #  For the 95% CI
thresholds <- adjustcolor(theme.grid, alpha.f = 1)   #  For the curve and arrows
ab.lines <- adjustcolor(theme.grid, alpha.f = 0.35)  #  For the minor grid
ab.lines2 <- adjustcolor(theme.grid, alpha.f = 0.85) #  For the powers of 10
coltext <- "red3"                                    #  For the 50% and 95% EDs
linewd1 <- 2
linewd2 <- 1
linewd3 <- 0.6
## Start and configure the PNG engine.
png(file = "./figures/HF183_lod.png", bg = "white",
width = 1200, height = 750, units = "px", res = 600,
type = "cairo", antialias = "default",
family = "Helvetica", pointsize = 3)
par(oma = c(0.05,0.05,0.05,0.05))
## Create "empty" plot first. This way we can overlay the curve on top of the grid.
plot(mod.probit, type = "n", bty = "n", xlim = c(0.1, 10^5), ylim = c(0, 1),
xlab = "Copies per assay", ylab = "Positives/Total", font.main = 1,
cex.main = 0.8, axes = FALSE)
## Draw the grid lines.
abline(h = c(seq(0, 0.4, by = 0.1), seq(0.6, 1, by = 0.1)), lwd = linewd3,
col = ab.lines)
abline(v = seq(0.2, 0.9, by = 0.1), lwd = linewd3, col = ab.lines)
abline(v = seq(2, 9, by = 1), lwd = linewd3, col = ab.lines)
abline(v = seq(20, 90, by = 10), lwd = linewd3, col = ab.lines)
abline(v = seq(200, 900, by = 100), lwd = linewd3, col = ab.lines)
abline(v = seq(2000, 9000, by = 1000), lwd = linewd3, col = ab.lines)
abline(v = seq(20000, 90000, by = 10^4), lwd = linewd3, col = ab.lines)
abline(v = c(0.1, 1, 10, 100, 1000, 10^4, 10^5), lwd = linewd3, col = ab.lines2)
abline(h = c(0.5, 0.95), lwd = linewd3, col = thresholds)
## Overlay the assay points and the curve for the probit model. Draw the axes.
par(new = TRUE)
plot(mod.probit,
pch = 19, bg = shading, cex = 0.875, xlim = c(0.1, 10^5), ylim = c(0, 1),
lwd = linewd2, col = theme,
main = "", xlab = "", ylab = "",
axes = FALSE, bty = "n"
)
axis(1, at=c(0.1, 1, 10, 100, 1000, 10000, 100000),
labels = c(0.1, 1, 10, 100, 1000, 10000, 100000), lty = 1, lwd = 0.8,
lwd.ticks = 0.8)
axis(2, at=c(0, 0.5, 0.95), labels = c("0%", "50%", "95%"), lty = 1, las = 2,
cex = 0.25, lwd = 0.8, lwd.ticks = 0.8)
## Plot the 95% confidence interval using transparent shading.
polygon(x = c(pxx, rev(pxx)),
y = c(predict2.ci[,2], rev(predict2.ci[,3])),
col = shading, border = NA)
## Plot the legend.
legend(x = 12500, y = 0.225, bty = "o", cex = 0.8, bg = "white", box.col = NA,
box.lwd = 1, inset = c(0.02, 0.03), y.intersp = 1.15,
legend = c("Assay points", "Probit model", "95% CI"), lty = c(NA, 1, NA),
pch = c(19, NA, 15), lwd = c(NA, linewd2, NA), seg.len =1.15,
col = c(theme, theme, shading), pt.cex = c(0.7, NA, 1.8), pt.lwd = linewd2)
## Plot the legend.
legend(x = 12500, y = 0.225, bty = "o", cex = 0.8, bg = "white", box.col = NA,
box.lwd = 1, inset = c(0.02, 0.03), y.intersp = 1.15,
legend = c("Assay points", "Probit model", "95% CI"), lty = c(NA, 1, NA),
pch = c(19, NA, 15), lwd = c(NA, linewd2, NA), seg.len =1.15,
col = c(theme, theme, shading), pt.cex = c(0.7, NA, 1.8), pt.lwd = linewd2)
## Draw arrows and annotations for the ED50 and ED95 intersection with the probit curve.
arrows(EDose[EDose[, 1] == 50, 2], 0.5, EDose[EDose[, 1] == 50, 2], 0,
length = 0.025, angle = 25, code = 2, col = theme, lty = 1,
lwd = 1.05 * linewd3)
arrows(EDose[EDose[, 1] == 95, 2], 0.95, EDose[EDose[, 1] == 95, 2], 0,
length = 0.025, angle = 25, code = 2, col = theme, lty = 1,
lwd = 1.05 * linewd3)
text(EDose[EDose[, 1] == 50, 2], 0.5,
labels = signif(EDose[EDose[, 1] == 50, 2], digits = 3), cex = 0.8,
pos = 2, col = coltext, offset = 1.05)
text(EDose[EDose[, 1] == 95, 2], 0.95,
labels = signif(EDose[EDose[, 1] == 95, 2], digits = 3), cex = 0.8,
pos = 2, col = coltext, offset = 1.05)
dev.off()
crassphage_probit =
std_curves %>%
filter(Target == "crassphage") %>%
mutate(Cq = as.numeric(Cq)) %>%
filter(dilution > 7) %>%
mutate(detection = case_when(Cq != "NaN" ~ 1,
TRUE ~ 0)) %>%
group_by(dilution, quantity) %>%
summarize(Total = n(),
Positives = sum(detection)) %>%
ungroup() %>%
mutate(Nb_copies = quantity) %>%
dplyr::select(Nb_copies, Positives, Total)
## Relabel data
probdata <- crassphage_probit
encab <- colnames(probdata)
colnames(probdata) <- c("Dose", "Positives", "Total")
## These will be the percent values to calculate effective doses for.
steps <- c(1:9, seq(10, 85, by = 5), 90:99)
## Calculation of the probit model and predicted effective doses.
mod.probit <- drm(
formula = I(Positives/Total) ~ Dose,
weights = Total,
data = probdata,
fct = LN.2(),
type = "binomial"
)
colnames(probdata) <- encab # Restores the column names in the raw data table.
EDose <- ED(mod.probit, respLev = steps, interval = "delta", level = 0.95)
EDose <- cbind(ED.percent = steps, EDose)
timestamp <- date()
## Colour scheme and other graphical parameters.
theme <- "black"
theme.grid <- "gray70"
shading <- adjustcolor(theme, alpha.f = 0.15)        #  For the 95% CI
thresholds <- adjustcolor(theme.grid, alpha.f = 1)   #  For the curve and arrows
ab.lines <- adjustcolor(theme.grid, alpha.f = 0.35)  #  For the minor grid
ab.lines2 <- adjustcolor(theme.grid, alpha.f = 0.85) #  For the powers of 10
coltext <- "red3"                                    #  For the 50% and 95% EDs
linewd1 <- 2
linewd2 <- 1
linewd3 <- 0.6
## Start and configure the PNG engine.
png(file = "./figures/crAssphage_lod.png", bg = "white",
width = 1200, height = 750, units = "px", res = 600,
type = "cairo", antialias = "default",
family = "Helvetica", pointsize = 3)
par(oma = c(0.05,0.05,0.05,0.05))
## Create "empty" plot first. This way we can overlay the curve on top of the grid.
plot(mod.probit, type = "n", bty = "n", xlim = c(0.1, 10^5), ylim = c(0, 1),
xlab = "Copies per assay", ylab = "Positives/Total", font.main = 1,
cex.main = 0.8, axes = FALSE)
## Draw the grid lines.
abline(h = c(seq(0, 0.4, by = 0.1), seq(0.6, 1, by = 0.1)), lwd = linewd3,
col = ab.lines)
abline(v = seq(0.2, 0.9, by = 0.1), lwd = linewd3, col = ab.lines)
abline(v = seq(2, 9, by = 1), lwd = linewd3, col = ab.lines)
abline(v = seq(20, 90, by = 10), lwd = linewd3, col = ab.lines)
abline(v = seq(200, 900, by = 100), lwd = linewd3, col = ab.lines)
abline(v = seq(2000, 9000, by = 1000), lwd = linewd3, col = ab.lines)
abline(v = seq(20000, 90000, by = 10^4), lwd = linewd3, col = ab.lines)
abline(v = c(0.1, 1, 10, 100, 1000, 10^4, 10^5), lwd = linewd3, col = ab.lines2)
abline(h = c(0.5, 0.95), lwd = linewd3, col = thresholds)
## Overlay the assay points and the curve for the probit model. Draw the axes.
par(new = TRUE)
plot(mod.probit,
pch = 19, bg = shading, cex = 0.875, xlim = c(0.1, 10^5), ylim = c(0, 1),
lwd = linewd2, col = theme,
main = "", xlab = "", ylab = "",
axes = FALSE, bty = "n"
)
axis(1, at=c(0.1, 1, 10, 100, 1000, 10000, 100000),
labels = c(0.1, 1, 10, 100, 1000, 10000, 100000), lty = 1, lwd = 0.8,
lwd.ticks = 0.8)
axis(2, at=c(0, 0.5, 0.95), labels = c("0%", "50%", "95%"), lty = 1, las = 2,
cex = 0.25, lwd = 0.8, lwd.ticks = 0.8)
## Plot the legend.
legend(x = 12500, y = 0.225, bty = "o", cex = 0.8, bg = "white", box.col = NA,
box.lwd = 1, inset = c(0.02, 0.03), y.intersp = 1.15,
legend = c("Assay points", "Probit model", "95% CI"), lty = c(NA, 1, NA),
pch = c(19, NA, 15), lwd = c(NA, linewd2, NA), seg.len =1.15,
col = c(theme, theme, shading), pt.cex = c(0.7, NA, 1.8), pt.lwd = linewd2)
## Draw arrows and annotations for the ED50 and ED95 intersection with the probit curve.
arrows(EDose[EDose[, 1] == 50, 2], 0.5, EDose[EDose[, 1] == 50, 2], 0,
length = 0.025, angle = 25, code = 2, col = theme, lty = 1,
lwd = 1.05 * linewd3)
arrows(EDose[EDose[, 1] == 95, 2], 0.95, EDose[EDose[, 1] == 95, 2], 0,
length = 0.025, angle = 25, code = 2, col = theme, lty = 1,
lwd = 1.05 * linewd3)
text(EDose[EDose[, 1] == 50, 2], 0.5,
labels = signif(EDose[EDose[, 1] == 50, 2], digits = 3), cex = 0.8,
pos = 2, col = coltext, offset = 1.05)
text(EDose[EDose[, 1] == 95, 2], 0.95,
labels = signif(EDose[EDose[, 1] == 95, 2], digits = 3), cex = 0.8,
pos = 2, col = coltext, offset = 1.05)
dev.off()
#-------------------------------------------------------------------------------
cq.pmmov.lod = 41.205 - 3.1519*log10(20.7)
#crAssphage (3 copies): y = 37.678 - 3.3104x
cq.crassphage.lod = 37.678 - 3.3104*log10(3)
#HF183 (3 copies): y = 35.949 - 3.2548x
cq.HF183.lod = 35.949 - 3.2548*log10(3)
